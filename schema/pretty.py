"""pretty.py

When you run this script the schema in mmif.json will be taken and be pretty
printed to pretty.md. Simplistic in nature, but it works fine (for now) for the
MMIF schema.

"""


import io
import json


MMIF_SCHEMA = 'mmif.json'


def print_property(buffer, prop, obj):
    buffer.write('<tr>\n')
    buffer.write('  <td width="100">%s</td>\n' % prop)
    if '$ref' in obj:
        buffer.write('  <td>%s</td>\n' % str(obj['$ref']))
    elif 'type' in obj and obj['type'] == 'array':
        buffer.write('  <td>%s</td>\n' % str(obj['items']['$ref']))
    elif 'type' in obj and obj['type'] == 'integer':
        value_type = 'integer'
        if 'minimum' in obj:
            value_type += ' &gt;= %s' % obj['minimum']
        buffer.write('  <td>%s</td>\n' % value_type)
    elif 'type' in obj and obj['type'] == 'string':
        value_type = obj['type']
        if 'format' in obj:
            value_type += ' - %s' % obj['format']
        buffer.write('  <td>%s</td>\n' % value_type)
    elif 'patternProperties' in obj and len(obj['patternProperties']) == 1:
        print_pattern_properties(buffer, obj)
    else:
        buffer.write('  <td>%s</td>\n' % str(obj))
    buffer.write('</tr>\n')
    buffer.write('<tr></tr>\n')


def print_pattern_properties(buffer, obj):
    key = list(obj['patternProperties'].keys())[0]
    if '$ref' in obj['patternProperties'][key]:
        val_type = obj['patternProperties'][key]['$ref']
        key += ' → %s' % val_type
    elif 'type' in obj['patternProperties'][key]:
        val_type = obj['patternProperties'][key]['type']
        key += ' → %s' % val_type
    buffer.write('  <td>%s</td>\n' % key)


def print_schema(file_name):

    schema = json.load(open(file_name))

    buffer = io.StringIO()
    buffer.write('# MMIF Schema for People\n\n')
    buffer.write('Somewhat easier to read than the schema itself.\n\n')
    buffer.write('Do not edit. This file was autogenerated by pretty.py.\n\n')

    buffer.write('<strong>schema</strong>\n\n')
    buffer.write('<table>\n')
    for prop in schema['properties']:
        print_property(buffer, prop, schema['properties'][prop])
    buffer.write('</table>\n\n')

    for mmif_type in schema['definitions']:
        definition = schema['definitions'][mmif_type]
        buffer.write('<strong>%s</strong>\n' % mmif_type)
        buffer.write('<table>\n')
        #print(definition)
        if 'patternProperties' in definition:
            buffer.write('<tr>\n')
            print_pattern_properties(buffer, definition)
            buffer.write('</tr>\n')
        elif 'properties' in definition:
            for prop in definition['properties']:
                print_property(buffer, prop, definition['properties'][prop])
        buffer.write('</table>\n\n')

    with open('pretty.md','w') as fh:
        fh.write(buffer.getvalue())


if __name__ == '__main__':

    print_schema(MMIF_SCHEMA)
